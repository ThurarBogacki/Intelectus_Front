{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/mrmat/OneDrive/%C3%81rea%20de%20Trabalho/dinge/ufsm/Intelectus_Front/context/ThemeContext.tsx"],"sourcesContent":["\"use client\"\nimport { createContext, useContext, useState, ReactNode } from \"react\";\n\n// Defina o tipo para o contexto\ninterface ThemeContextType {\n  theme: string;\n  toggleTheme: () => void;\n}\n\n// Criando o contexto com um valor inicial `undefined`\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Provider para encapsular a lÃ³gica do tema\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState(\"light\");\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// Hook para acessar o contexto\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme deve ser usado dentro de um ThemeProvider\");\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AACA;;;AADA;;AASA,sDAAsD;AACtD,MAAM,6BAAe,CAAA,GAAA,4RAAA,CAAA,gBAAa,AAAD,EAAgC;AAG1D,SAAS,cAAc,EAAE,QAAQ,EAA2B;;IACjE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,MAAM,cAAc;QAClB,SAAS,CAAC,OAAU,SAAS,UAAU,SAAS;IAClD;IAEA,qBACE,4TAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;YAAO;QAAY;kBAChD;;;;;;AAGP;GAZgB;KAAA;AAeT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,4RAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}